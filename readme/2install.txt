安装
Elasticsearch依赖Java 7。
java -version
echo $JAVA_HOME
一旦我们将Java安装完成，我们就可以下载并安装Elasticsearch了。
其二进制文件可以从www.elasticsearch.org/download这里下载，你也可以从这里下载以前发布的版本。
对于每个版本，你可以在zip、tar、DEB、RPM类型的包中选择下载。简单起见，我们使用tar包。
我们像下面一样下载Elasticsearch 1.1.1 tar包（Windows用户应该下载zip包）：
curl -L -O https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.1.1.tar.gz
然后，如下将其解压（Windows下需要unzip响应的zip包）：
tar -xzvf elasticsearch-1.1.1.tar.gz
这将在你的当前目录下创建很多文件和目录。然后，我们进入到bin目录下：
cd elasticsearch-1.1.1/bin
至此，我们已经准备好开启我们的节点和单节点集群（Windows用户应该运行elasticsearch.bat文件）：
./elasticsearch
如果一切顺利，你将看到大量的如下信息：
./elasticsearch
        [2014-03-13 13:42:17,218][INFO ][node           ] [New Goblin] version[1.1.1], pid[2085], build[5c03844/2014-02-25T15:52:53Z]
        [2014-03-13 13:42:17,219][INFO ][node           ] [New Goblin] initializing ...
        [2014-03-13 13:42:17,223][INFO ][plugins        ] [New Goblin] loaded [], sites []
        [2014-03-13 13:42:19,831][INFO ][node           ] [New Goblin] initialized
        [2014-03-13 13:42:19,832][INFO ][node           ] [New Goblin] starting ...
        [2014-03-13 13:42:19,958][INFO ][transport      ] [New Goblin] bound_address {inet[/0:0:0:0:0:0:0:0:9300]}, publish_address {inet[/192.168.8.112:9300]}
        [2014-03-13 13:42:23,030][INFO ][cluster.service] [New Goblin] new_master [New Goblin][rWMtGj3dQouz2r6ZFL9v4g][mwubuntu1][inet[/192.168.8.112:9300]], reason: zen-disco-join (elected_as_master)
        [2014-03-13 13:42:23,100][INFO ][discovery      ] [New Goblin] elasticsearch/rWMtGj3dQouz2r6ZFL9v4g
        [2014-03-13 13:42:23,125][INFO ][http           ] [New Goblin] bound_address {inet[/0:0:0:0:0:0:0:0:9200]}, publish_address {inet[/192.168.8.112:9200]}
        [2014-03-13 13:42:23,629][INFO ][gateway        ] [New Goblin] recovered [1] indices into cluster_state
        [2014-03-13 13:42:23,630][INFO ][node           ] [New Goblin] started
不去涉及太多细节，我们可以看到，一叫做“New Goblin”（你会见到一个不同的漫威漫画角色）的节点启动并且将自己选做单结点集群的master。
正如先前提到的，我们可以覆盖集群或者节点的名字。我们可以在启动Elasticsearch的时候通过命令行来指定，如下：
./elasticsearch --cluster.name my_cluster_name --node.name my_node_name
也要注意一下有http标记的那一行，它提供了有关HTTP地址（192.168.8.112）和端口（9200）的信息，通过这个地址和端口我们就可以访问我们的节点了。
默认情况下，Elasticsearch使用9200来提供对其REST API的访问。如果有必要，这个端口是可以配置的。

探索你的集群
rest接口
现在我们已经有一个正常运行的节点（和集群）了，下一步就是要去理解怎样与其通信了。
幸运的是，Elasticsearch提供了非常全面和强大的REST API，利用这个REST API你可以同你的集群交互。下面是利用这个API，可以做的几件事情：
- 检查你的集群、节点和索引的健康状态、和各种统计信息
- 管理你的集群、节点、索引数据和元数据
- 对你的索引进行CRUD（创建、读取、更新和删除）和搜索操作
- 执行高级的查询操作，像是分页、排序、过滤、脚本编写（scripting）、小平面刻画（faceting）、聚合（aggregations）和许多其它操作

集群健康
让我们以基本的健康检查作为开始，我们可以利用它来查看我们集群的状态。此过程中，我们使用curl，当然，你也可以使用任何可以创建HTTP/REST调用的工具。
我们假设我们还在我们启动Elasticsearch的节点上并打开另外一个shell窗口。
要检查集群健康，我们将使用_cat API。需要事先记住的是，我们的节点HTTP的端口是9200：
curl 'localhost:9200/_cat/health?v'
相应的响应是：
            epoch      timestamp cluster       status node.total node.data shards pri relo init unassign
            1394735289 14:28:09  elasticsearch green           1         1      0   0    0    0        0
可以看到，我们集群的名字是“elasticsearch”，正常运行，并且状态是绿色。
当我们询问集群状态的时候，我们要么得到绿色、黄色或红色。
绿色代表一切正常（集群功能齐全），黄色意味着所有的数据都是可用的，但是某些复制没有被分配（集群功能齐全），红色则代表因为某些原因，某些数据不可用。
注意，即使是集群状态是红色的，集群仍然是部分可用的（它仍然会利用可用的分片来响应搜索请求），但是可能你需要尽快修复它，因为你有丢失的数据。
也是从上面的响应中，我们可以看到，一共有一个节点，由于里面没有数据，我们有0个分片。
注意，由于我们使用默认的集群名字（elasticsearch），并且由于Elasticsearch默认使用网络多播（multicast）发现其它节点，
如果你在你的网络中启动了多个节点，你就已经把她们加入到一个集群中了。在这种情形下，你可能在上面的响应中看到多个节点。
        
我们也可以获得节集群中的节点列表：
curl 'localhost:9200/_cat/nodes?v'
对应的响应是:
            curl 'localhost:9200/_cat/nodes?v'
            host         ip        heap.percent ram.percent load node.role master name
            mwubuntu1    127.0.1.1            8           4 0.00 d         *      New Goblin
这儿，我们可以看到我们叫做“New Goblin”的节点，这个节点是我们集群中的唯一节点。

列出所有的索引
让我们看一下我们的索引：
curl 'localhost:9200/_cat/indices?v'
响应是：
            curl 'localhost:9200/_cat/indices?v'
            health index pri rep docs.count docs.deleted store.size pri.store.size
这个结果意味着，在我们的集群中，我们没有任何索引。

创建一个索引
现在让我们创建一个叫做“customer”的索引，然后再列出所有的索引：
curl -XPUT 'localhost:9200/customer?pretty'
curl 'localhost:9200/_cat/indices?v'
第一个命令使用PUT创建了一个叫做“customer”的索引。我们简单地将pretty附加到调用的尾部，使其以美观的形式打印出JSON响应（如果有的话）。
响应如下：
            curl -XPUT 'localhost:9200/customer?pretty'
            {
              "acknowledged" : true
            }
            curl 'localhost:9200/_cat/indices?v'
            health index    pri rep docs.count docs.deleted store.size pri.store.size
            yellow customer   5   1          0            0       495b           495b
第二个命令的结果告知我们，我们现在有一个叫做customer的索引，并且它有5个主分片和1份复制（都是默认值），其中包含0个文档。
你可能也注意到了这个customer索引有一个黄色健康标签。回顾我们之前的讨论，黄色意味着某些复制没有（或者还未）被分配。
这个索引之所以这样，是因为Elasticsearch默认为这个索引创建一份复制。
由于现在我们只有一个节点在运行，那一份复制就分配不了了（为了高可用），直到当另外一个节点加入到这个集群后，才能分配。
一旦那份复制在第二个节点上被复制，这个节点的健康状态就会变成绿色。
        


索引并查询一个文档
现在让我们放一些东西到customer索引中。首先要知道的是，为了索引一个文档，我们必须告诉Elasticsearch这个文档要到这个索引的哪个类型（type）下。
让我们将一个简单的客户文档索引到customer索引、“external”类型中，这个文档的ID是1，操作如下：
curl -XPUT 'localhost:9200/customer/external/1?pretty' -d '{"name": "John Doe"}'
响应如下：
        curl -XPUT 'localhost:9200/customer/external/1?pretty' -d '
        {
          "name": "John Doe"
        }'
        {
          "_index" : "customer",
          "_type" : "external",
          "_id" : "1",
          "_version" : 1,
          "created" : true
        }
从上面的响应中，我们可以看到，一个新的客户文档在customer索引和external类型中被成功创建。文档也有一个内部id 1，这个id是我们在索引的时候指定的。
有一个关键点需要注意，Elasticsearch在你想将文档索引到某个索引的时候，并不强制要求这个索引被显式地创建。
在前面这个例子中，如果customer索引不存在，Elasticsearch将会自动地创建这个索引。
现在，让我们把刚刚索引的文档取出来：
curl -XGET 'localhost:9200/customer/external/1?pretty'
响应如下：
        curl -XGET 'localhost:9200/customer/external/1?pretty'
        {
          "_index" : "customer",
          "_type" : "external",
          "_id" : "1",
          "_version" : 1,
          "found" : true, "_source" : { "name": "John Doe" }
        }
除了一个叫做found的字段来指明我们找到了一个ID为1的文档，和另外一个字段——_source——返回我们前一步中索引的完整JSON文档之外，其它的都没有什么特别之处。
    
    
删除一个文档
现在让我们删除我们刚刚创建的索引，并再次列出所有的索引：
curl -XDELETE 'localhost:9200/customer?pretty'
curl 'localhost:9200/_cat/indices?v'
响应如下：
        curl -XDELETE 'localhost:9200/customer?pretty'
        {
          "acknowledged" : true
        }
        curl 'localhost:9200/_cat/indices?v'
        health index pri rep docs.count docs.deleted store.size pri.store.size
这表明我们成功地删除了这个索引，现在我们回到了集群中空无所有的状态。
在更进一步之前，我们再细看一下一些我们学过的API命令：
        curl -XPUT 'localhost:9200/customer'
        curl -XPUT 'localhost:9200/customer/external/1' -d '{"name": "John Doe"}'
        curl 'localhost:9200/customer/external/1'
        curl -XDELETE 'localhost:9200/customer'
如果我们仔细研究以上的命令，我们可以发现访问Elasticsearch中数据的一个模式。这个模式可以被总结为：
curl -<REST Verb> <Node>:<Port>/<Index>/<Type><ID>
这个REST访问模式普遍适用于所有的API命令，如果你能记住它，你就会为掌握Elasticsearch开一个好头。